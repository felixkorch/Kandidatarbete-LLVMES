#macro STORE_RESULT 0
    PHP
    PLA
    STX tmp
    LDX result_idx
    STA $3000,X
    INX
    STX result_idx
    LDX tmp
#endmacro

.org $8000

; Flags: N V U B D I Z C
; CMP sets N, Z and C so the idea is to test for equality, greater than, and
; lesser than. It's important that at least one of the tests uses negative
; numbers and at least one uses positive so that all flags are properly
; tested.

main:
    LDX #0
; Test CMP Immediate
    LDA #$AA ; Load X with #AA
    CMP #$AA  ; Compare immediate with #AA
    STORE_RESULT
    LDA #$AB    ; Load X with #02
    CMP #$AA  ; Compare immediate with #AA
    STORE_RESULT
    LDA #$09    ; Load X with #0B
    CMP #$0A  ; Compare immediate with #AA
    STORE_RESULT

; Test CMP Zeropage
    LDA #$AA ; Store #AA in accumulator
    STA $20  ; Store A on address $20
    CMP $20 ; Compare with the address $20
    STORE_RESULT
    LDA #$AB    ; Load A with #0B
    CMP $20  ; Compare with the address $20
    STORE_RESULT
    LDA #$0A    ; Load A with #02
    STA $20  ; Store A on address $20
    LDA #$09
    CMP $20  ; Compare with the address $20
    STORE_RESULT


; Test CMP ZeropageX
    LDA #$AA ; Store #AA in accumulator
    STA $20  ; Store A on address $20
    LDX #0 ; Load X with #0
    CMP $20,X  ; Compare with the address $20+X
    STORE_RESULT
    LDA #$AB    ; Load X with #0B
    CMP $20,X  ; Compare with the address $20+X
    STORE_RESULT
    LDA #$0A    ; Load A with #02
    STA $20  ; Store A on address $20
    LDA #$09
    CMP $20,X  ; Compare with the address $20+X
    STORE_RESULT


; Test CMP Absolute
    LDA #$AA ; Store #AA in accumulator
    STA $2000  ; Store A on address $2000
    CMP $2000  ; Compare with the address $0000
    STORE_RESULT
    LDA #$AB    ; Load A with #0B
    CMP $2000  ; Compare with the address $0000
    STORE_RESULT
    LDA #$0A    ; Load A with #02
    STA $2000  ; Store A on address $0000
    LDA #$09
    CMP $2000  ; Compare with the address $2000
    STORE_RESULT


; Test CMP AbsoluteX
    LDA #$AA ; Store #AA in accumulator
    LDX #0 ; Load X with #0
    STA $2000  ; Store A on address $2000
    CMP $2000,X  ; Compare with the address $2000+X
    STORE_RESULT
    LDA #$AB    ; Load A with #0B
    CMP $2000,X  ; Compare with the address $2000+X
    STORE_RESULT
    LDA #$0A    ; Load A with #02
    STA $2000  ; Store A on address $0000
    LDA #$09
    CMP $2000,X  ; Compare with the address $2000+X
    STORE_RESULT

; Test CMP AbsoluteY
    LDA #$AA ; Store #AA in accumulator
    LDY #0 ; Load Y with #0
    STA $2000  ; Store A on address $2000
    CMP $2000,Y  ; Compare with the address $2000+Y
    STORE_RESULT
    LDA #$AB    ; Load A with #0B
    CMP $2000,Y  ; Compare with the address $2000+Y
    STORE_RESULT
    LDA #$0A    ; Load A with #02
    STA $2000  ; Store A on address $0000
    LDA #$09
    CMP $2000,Y  ; Compare with the address $2000+Y
    STORE_RESULT


; Test CPX Immediate
    LDX #$AA ; Load X with #AA
    CPX #$AA  ; Compare immediate with #AA
    STORE_RESULT
    LDX #$AB    ; Load X with #0B
    CPX #$AA  ; Compare immediate with #AA
    STORE_RESULT
    LDX #$09    ; Load X with #02
    CPX #$0A  ; Compare immediate with #AA
    STORE_RESULT


; Test CPX Zeropage
    LDA #$AA ; Store #AA in accumulator
    STA $20  ; Store A on address $20
    LDX #$AA ; Load X with #AA
    CPX $20  ; Compare with the address $20
    STORE_RESULT
    LDX #$AB    ; Load X with #0B
    CPX $20  ; Compare with the address $20
    STORE_RESULT
    LDA #$0A    ; Load A with #02
    STA $20  ; Store A on address $20
    LDX #$09    ; Load X with #02
    CPX $20  ; Compare with the address $20
    STORE_RESULT


; Test CPX Absolute
    LDA #$AA ; Store #AA in accumulator
    STA $2000  ; Store A on address $20
    LDX #$AA ; Load X with #AA
    CPX $2000  ; Compare with the address $2000
    STORE_RESULT
    LDX #$AB    ; Load X with #0B
    CPX $2000  ; Compare with the address $2000
    STORE_RESULT
    LDA #$0A    ; Load A with #02
    STA $2000  ; Store A on address $2000
    LDX #$09    ; Load X with #02
    CPX $2000  ; Compare with the address $2000
    STORE_RESULT

; Test CPY Immediate
    LDY #$AA ; Load Y with #AA
    CPY #$AA  ; Compare immediate with #AA
    STORE_RESULT
    LDY #$AB    ; Load Y with #0B
    CPY #$AA  ; Compare immediate with #AA
    STORE_RESULT
    LDY #$09    ; Load Y with #02
    CPY #$0A  ; Compare immediate with #AA
    STORE_RESULT

; Test CPY Zeropage
    LDA #$AA ; Store #AA in accumulator
    STA $20  ; Store A on address $20
    LDY #$AA ; Load Y with #AA
    CPY $20  ; Compare with the address $20
    STORE_RESULT
    LDY #$AB    ; Load Y with #0B
    CPY $20  ; Compare with the address $20
    STORE_RESULT
    LDA #$0A    ; Load A with #02
    STA $20  ; Store A on address $20
    LDY #$09    ; Load Y with #02
    CPY $20  ; Compare with the address $20
    STORE_RESULT


; Test CPY Absolute
    LDA #$AA ; Store #AA in accumulator
    STA $2000  ; Store A on address $20
    LDY #$AA ; Load Y with #AA
    CPY $2000  ; Compare with the address $2000
    STORE_RESULT
    LDY #$AB    ; Load Y with #0B
    CPY $2000  ; Compare with the address $2000
    STORE_RESULT
    LDA #$0A    ; Load A with #02
    STA $2000  ; Store A on address $2000
    LDY #$09    ; Load Y with #02
    CPY $2000  ; Compare with the address $2000
    STORE_RESULT

check_memory:
    LDX #$00
check_memory_loop:
    LDA $3000,X
    CMP expected_result,X
    BNE fail
    INX
    CPX #14
    BNE check_memory_loop
complete:
    JSR print_success
    JMP success
print_success:
    LDX #$00 ; Reset X register
print_msg:
    LDA success_str,X
    BEQ print_newline
    STA $2008
    INX
    JMP print_msg
print_newline:
    LDA #10 ; Newline
    STA $2008 ; Print new line
    RTS
success_str:
.db "CMP tests passed!", 0
print_fail:
    LDX #$00 ; Reset X register
print_msg2:
    LDA fail_str,X
    BEQ print_newline
    STA $2008
    INX
    JMP print_msg2
fail_str:
.db "CMP tests failed!", 0
fail:
    JSR print_fail
    LDA #1
    STA $200F
success:
    LDA #0
    STA $200F

expected_result:
.db $37, $35, $B4, $37, $35, $B4, $37, $35
.db $B4, $37, $35, $B4, $37, $35, $B4, $37
.db $35, $B4, $37, $35, $B4, $37, $35, $B4
.db $37, $35, $B4, $37, $35, $B4, $37, $35
.db $B4, $37, $35, $B4

result_idx:
.db 0
tmp:
.db 0

.org $FFFC
.dw main ; Reset vector
