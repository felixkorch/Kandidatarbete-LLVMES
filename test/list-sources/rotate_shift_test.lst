#macro STORE_RESULT_A 0
    STX tmp
    PHA
    LDX result_idx
    STA $3000,X
    INX
    STX result_idx
    PLA
    LDX tmp
#endmacro
#macro STORE_STATUS 0
    PHA
    PHP
    PLA
    STX tmp
    LDX result_idx
    STA $3000,X
    INX
    STX result_idx
    LDX tmp
    PLA
#endmacro

.org $8000

; Flags: N V U B D I Z C

main:
    ;; TEST ROR ;;
; Test ROR Accumulator
    LDA #$00
    ROR
    STORE_STATUS
    STORE_RESULT_A   ; $55
; Test ROR Zeropage
    LDA #$8F
    STA $00
    ROR $00
    STORE_STATUS
    LDA $00
    STORE_RESULT_A   ; $55
; Test ROR Zeropage,X
    LDA #$7A
    STA $01
    LDX #1
    SEC
    ROR $00,X
    STORE_STATUS
    LDA $01
    STORE_RESULT_A   ; $55
; Test ROR Absolute
    LDA #$AA
    STA $2000
    ROR $2000
    STORE_STATUS
    LDA $2000
    STORE_RESULT_A   ; $55
; Test ROR Absolute,X
    LDA #$AA
    STA $2001
    LDX #1
    ROR $2000,X
    STORE_STATUS
    LDA $2001
    STORE_RESULT_A   ; $55

    ;; TEST ROL ;;
; Test ROL Accumulator
    LDA #$00
    ROL
    STORE_STATUS
    STORE_RESULT_A   ; $AA
; Test ROL Zeropage
    LDA #$FF
    STA $00
    ROL $00
    STORE_STATUS
    LDA $00
    STORE_RESULT_A   ; $AA
; Test ROL Zeropage,X
    LDX #1
    ROL $00,X
    STORE_STATUS
    LDA $01
    STORE_RESULT_A   ; $AA
; Test ROL Absolute
    ROL $2000
    STORE_STATUS
    LDA $2000
    STORE_RESULT_A   ; $AA
; Test ROL Absolute,X
    LDX #1
    ROL $2000,X
    STORE_STATUS
    LDA $2001
    STORE_RESULT_A   ; $AA

    ;; TEST LSR ;;
; Test LSR Accumulator
    LDA #$00
    LSR
    STORE_STATUS
    STORE_RESULT_A   ; $55
; Test LSR Zeropage
    LDA #$8F
    STA $00
    LSR $00
    STORE_STATUS
    LDA $00
    STORE_RESULT_A   ; $55
; Test LSR Zeropage,X
    LDA #$7A
    STA $01
    LDX #1
    LSR $00,X
    STORE_STATUS
    LDA $01
    STORE_RESULT_A   ; $55
; Test LSR Absolute
    LDA #$AA
    STA $2000
    LSR $2000
    STORE_STATUS
    LDA $2000
    STORE_RESULT_A   ; $55
; Test LSR Absolute,X
    LDA #$AA
    STA $2001
    LDX #1
    LSR $2000,X
    STORE_STATUS
    LDA $2001
    STORE_RESULT_A   ; $55

    ;; TEST ASL ;;
; Test ASL Accumulator
    LDA #$55
    ASL
    STORE_STATUS
    STORE_RESULT_A   ; $AA
; Test ASL Zeropage
    ASL $00
    STORE_STATUS
    LDA $00
    STORE_RESULT_A   ; $AA
; Test ASL Zeropage,X
    LDX #1
    ASL $00,X
    STORE_STATUS
    LDA $01
    STORE_RESULT_A   ; $AA
; Test ASL Absolute
    ASL $2000
    STORE_STATUS
    LDA $2000
    STORE_RESULT_A   ; $AA
; Test ASL Absolute,X
    LDX #1
    ASL $2000,X
    STORE_STATUS
    LDA $2001
    STORE_RESULT_A   ; $AA

check_memory:
    LDX #$00
check_memory_loop:
    LDA $3000,X
    CMP expected_result,X
    BNE print_fail
    INX
    CPX #40                     ; Length of expected_results
    BNE check_memory_loop
    LDX #$00 ; Reset X register
print_msg:
    LDA success_str,X
    BEQ success
    STA $2008
    INX
    JMP print_msg
success:
    LDA #10 ; Newline
    STA $2008 ; Print new line
    LDA #0
    STA $200F
print_fail:
    LDX #$00 ; Reset X register
print_msg2:
    LDA fail_str,X
    BEQ fail
    STA $2008
    INX
    JMP print_msg2
fail:
    LDA #10 ; Newline
    STA $2008 ; Print new line
    LDA #1
    STA $200F
success_str:
.db "Rotate/Shift test passed!", 0
fail_str:
.db "Rotate/Shift test failed!", 0
expected_result:
.db $36, $00, $35, $47, $B4, $BD, $34, $55
.db $34, $55, $36, $00, $B5, $FE, $35, $7B
.db $B4, $AB, $B4, $AA, $36, $00, $35, $47
.db $34, $3D, $34, $55, $34, $55, $B4, $AA
.db $B4, $8E, $34, $7A, $B4, $AA, $B4, $AA
result_idx:
.db 0
tmp:
.db 0

.org $FFFC
.dw main ; Reset vector
