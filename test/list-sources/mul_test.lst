.org $8000

#macro FACTOR_ONE 0 $0F #endmacro ; 15 *
#macro FACTOR_TWO 0 $2D #endmacro ; 45 = 675 ($02A3)
#macro REF_VALUE_LOW 0 #$A3 #endmacro
#macro REF_VALUE_HIGH 0 #$02 #endmacro

; Algorithm originally written by Leif Stensson
; Desc: Can multiply two 8-bit numbers, result will be stored in
;       factor_one (low) & factor_two (high)
;
; This file can be seen as a test for: LSR / ROR

factor_one:
    .db FACTOR_ONE

factor_two:
    .db FACTOR_TWO

main:
    LDA     #0
    LDX     #$8
    LSR     factor_one
loop:
    BCC     no_add
    CLC
    ADC     factor_two
no_add:
    ROR
    ROR     factor_one
    DEX
    BNE     loop
    STA     factor_two

    LDA     REF_VALUE_LOW
    CMP     factor_one
    BNE     fail
    LDA     REF_VALUE_HIGH
    CMP     factor_two
    BNE     fail
    JMP     success

fail:
    LDA     factor_two
    STA     $2009
    LDA     factor_one
    STA     $2009
    LDA     #1
    JMP     exit

success:
    LDA     factor_two
    STA     $2009
    LDA     factor_one
    STA     $2009
    LDA     #0
    JMP     exit

exit:
    STA     $200F

.org $FFFC
.dw main ; Reset routine